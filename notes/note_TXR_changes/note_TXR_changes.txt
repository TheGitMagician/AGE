# TXR changes

## Added `o_txr` to Manage Initialization for the AGE-System

* added [o_txr](project://o_txr)

This object

1) initializes TXR
2) adds the AGE-specific macros/constants to TXR
3) adds the necessary white-listed GameMaker functions to TXR
4) adds the custom global AGE functions to TXR (global in the sense that they can be called without reference to an AGE struct, e.g. wait() )

It also stores the constructor for the Yield_Manager which is created whenever a thread is yielded
and stores its reference and can restart it either automatically (after a timer has run out) or via external call.


## Added Functionality to "Block" the Game AdventureGameStudio-Style

* added a TXR_Yield_Manager struct in `o_txr`

This TXR_Yield_Manager struct is instantiated whenever a thread is blocked (because of a blocking AGE function).
Since the only script that runs while the game is blocked is rep_exec_always and this script cannot block the game itself
there is automatically always only ever a maximum of 1 instane of this struct active at any time.
This struct holds a reference to the blocked thread and can be restarted either after a timer has run out or with an external call.
The blocked state of the whole engine is stored in `o_age_main`s `blocked` variable.


## Added a Thread Type to TXR Threads

* expanded `txr_run()`
* expanded `txr_thread_create()`
* expanded `txr_thread_resume()`

Officially txr_run() compiles a TXR script, creates a thread for it and resumes (=starts) the thread.
It has been expanded to take a new argument

* `thread_type`: this takes a value from the enum `txr_thread_type` (defined in `o_age_main`s Create Event)

Thread types are for example `standard`, `dialog`, `rep_exec`. These enable different behaviors if the threads are started or restared.
To check for these different scenarios, `txr_thread_resume()` has been expanded. For example, it now checks whether threads can be destroyed
after they have finished or if they need to be kept around because they are rep_exec. Also, it checks rep_exec_always threads for
blocking functions (which are not allowed) and throws an error message if any are found.


## Added a Scope to TXR Threads

* expanded `txr_thread_create()`

In `txr_thread_create()` the thread now gets a `txr_thread.scope` parameter. Originally this was meant to store the scope the thread was
started in so that when it is continued after a yield it knew its context. However, it turns out that for AGE's functionality all threads
should be run in the same context (which then provides all the necessary accessible variables/structs).

So currently this scope is hard-set to `o_age_main`.


## Removed Bug From Default-Function Feature

* changed `txr_build_expr()`
* changed `scr_txr_demo_default_func()`

The default-function is a feature that allows you to specify a function that is called if a function in a script doesn't exist.
However, there is a bug in this feature.
In `txr_build_expr()` in line 16 it is checked whether the called function exists or not. If not, a default function defined under the variable `txr_function_default`
should be called. If this variable is set to -1 (default) then a text message with the error is automatically generated.
The bug has two aspects.
1) The local variables needed to process this step are called `var _args = [], _argc = 0;` However, a couple of lines down they are accessed as `args` and `argc`, which throws an error.
The fix is to rename all the instances of these variables in this part of the code to `_args` and `_argc`.
2) There is a distinction whether the mode `txr_value_calls` is true or false. The true-mode seems to have been added later. In this mode the variable `_fn_script` is simply
set to `undefined` and the code continues. However, this later creates a problem in `txr_thread_resume()` where the function is not checked for the value `undefined` which creates an
error because a non-existing function is called (in the large switch-statement around line 125).
The fix is to delete the code from the false-mode of `txr_value_calls` and instead copy the code from the true-mode. Again, make sure that the local variables are written as _args and _argc.
It now sets the default-function correctly with the correct parameters.

Finally the provided default-function for the demo (`scr_txr_demo_default_func`) seems to contain some outdated code.
It refers to a global variable called `global.extra_functions` which doesn't exist in this version of TXR.
Instead write your own code - where you just have to make sure that it sets the variable `txr_function_error` which stops the thread and returns a debug error message.
The arguments that you can use in this function are [0]= name of the missing function, [1],[2],...= the arguments that were supplied to this missing function.


## Extended TXR Error Messages

* changed `txr_thread_resume()` (at the very end)
* changed `txr_throw()`

In both scripts I added the string "TXR Error: " to the beginning of the `txr_thread.result` output to make it more clear where the error originated


## Added Ability to Call and Run Methods of Structs

* changed `txr_init()`
* changed `txr_thread_resume()`

Originally, when you call a function in TXR it checks whether the function was added to the global map via txr_function_add(). If it wasn't then it will throw an error.
For example, you write: show_message("Hello") - TXR checks if show_message() exists in the global function map and calls it.
You could also call instance functions via instance_variable.function() - as long as the referenced instance contained the called function this worked because TXR stored the function reference and when it was called it was automatically run in the correct context.
However, if you tried to call a method of a struct via struct_reference.method() - this caused problems because TXR now stored the function reference to an anonymous function from a struct and then tried to run it in the context of the currently active instance.
I expanded TXR's ability to store the qualifier/context that has last been called. It is stored in the variable global.txr_exec_context.
Example 1) Object reference: If you write o_avatar.say() it would hold a reference to o_avatar.
Example 2) Instance ID: If you write my_friend.name (where my_friend is a variable of the instance that is executing the current thread) it would hold a reference to my_friend.
Example 3) Struct reference: If you write my_struct.age (where my_struct is a Struct reference) it would hold a reference to my_struct.
It is created in txr_init().
It is set in txr_thread_resume() at txr_action.get_field.
It is read in txr_thread_resume() at txr_action.value_call. There the function that is called is wrapped in a method() call which uses the context from the global variable to execute the function in.
This way you can now call an anonymous struct function in the context of the struct that it was gotten from.
The original behavior is still valid. If you simply call a function without any context then TXR will check it against its global function map.


## Added Better Error Detection when Non-Existing Variables are Accessed

* changed `txr_thread_resume`

In `txr_thread_resume` the parts `ident` and `set_ident` in the `txr_action` switch statement have been expanded so that they throw error messages if a non-existing variable or struct is called
instead of later crashing GameMaker when the thread is run.


## Added Ability to Define Setter-Methods

* changed `txr_compile_setter()`

txr_compile_setter() now checks if a field that is accessed in a struct has a special setter method. If the variable is then set via a TXR script
it automatically calls the corresponding setter method behind the scenes. This is useful if setting the variable should trigger other effects as well.
This is not necessary for all variables but only for those that need additional stuff to happen.

The setter method has to be named exactily like the variable and include the prefix __set_, so e.g. for the variable `test` -> `__set_test()`.


## Prevented TXR from Creating new Variables in Objects/Structs

* changed `txr_thread_resume()`

In `txr_thread_resume()` the section `set_field` in the `txr_action` switch statement was expaneded so that it now checks whether a variable
that you want to set, actually exists. If it doesn't TXR throws an error. This does NOT affect local TXR thread variables. It only affects
variables of the object in the context of which the thread is run. In AGE this is currently always the object `o_age_main`.
It also applies to any structs that you reference from a TXR script.
This prevents the user from creating new variables in these objects/structs. Instead the user should use local TXR variables or AGE's global variable system
if he needs persistent variables.


## Added Limited Ability to Access Assets Directly from TXR 

* changed `txr_compile_getter()`

In `txr_compile_getter()` the section `ident` in the `txr_node` switch statement was expanded so that it now checks whether
a reference is an asset that starts with the prefix `rm_` or `s_` and then allows direct access to this asset via TXR.
This allows the user to write `cIndi.change_room(rm_cave);` instead of `cIndi.change_room("rm_cave");` which is not only nicer to write
but also means that you don't have to do as many sanity checks on the parameter's value.

This could either be expaneded so that the user can create his own whitelist of allowed asset name prefixes that can be accessed by TXR.
Or the system could be thrown out again if it seems too risky and instead the user has to import all asset names that are supposed to be
accessed by TXR via `txr_constant_add()`.


